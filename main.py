from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.utils import executor
from aiogram.types import Message
from aiogram.dispatcher.filters import Text
from aiogram.types import ParseMode
import logging
import os

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ
from config import TOKEN_API, ADMIN_ID
import func
from keyboards import (
    start_kb, calculations_kb,
    statistic_kb, stat_back_kb,
    administrator_kb
)
from msgs import (
    START_MSG, CALC_MSG, STAT_MSG,
    PLOT_1_CAPTION, PLOT_2_CAPTION,
    HYDROGEN_INFO, ADMIN_MSG, HELP_MSG,
    CORRECT_MSG
)

import statistic_module
from news_module import news, URL_1, URL_2
from log_func import read_last_logs
from links import SAVE_PLOT_PATH

# –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
bot = Bot(TOKEN_API)
dp = Dispatcher(bot, storage=MemoryStorage())

logging.basicConfig(level=logging.INFO, filename="py_log.log", filemode="w",
                    format="%(asctime)s %(levelname)s %(message)s")


# —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º
@dp.message_handler(commands="start")
async def start(msg: Message):
    await msg.answer(START_MSG, reply_markup=start_kb())


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.message_handler(commands="admin")
async def admin(msg: Message):
    if str(msg.from_user.id) == ADMIN_ID:
        mes = read_last_logs(filename="py_log.log")
        await msg.answer(text=(ADMIN_MSG+'\n'+mes),
                         reply_markup=administrator_kb())
    else:
        await msg.answer('–ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.')


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ help
@dp.message_handler(commands="help")
async def help(msg: Message):
    await msg.answer(HELP_MSG)


# –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –æ –≤–æ–¥–æ—Ä–æ–¥–µ" –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message_handler(Text(equals="üíß –ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –æ –≤–æ–¥–æ—Ä–æ–¥–µ"))
async def brief_hydrogen(msg: Message):
    await msg.answer(text=HYDROGEN_INFO, parse_mode=ParseMode.HTML)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞" –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message_handler(Text(equals="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"))
async def proc_analysys(msg: Message):
    await msg.answer(text=STAT_MSG, reply_markup=statistic_kb())


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞" –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message_handler(Text(equals="üßÆ –í–æ–¥–æ—Ä–æ–¥–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"))
async def proc_clac(msg: Message):
    await msg.answer(text=CALC_MSG, reply_markup=calculations_kb())


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤–æ—Å—Ç–∏" –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message_handler(Text(equals="üåê –ù–æ–≤–æ—Å—Ç–∏"))
async def news_message(msg: Message):
    news1 = news(URL_1)
    news2 = news(URL_2)
    news1_message = (
        f"<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –º–∏—Ä–∞ –≤–æ–¥–æ—Ä–æ–¥–Ω–æ–π —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏</b>\n\n"
        f"<a href='{news1['url']}'>{news1['title']}</a>\n"
        f"{news1['data']}\n\n"
        )
    news2_message = (
        f"<a href='{news2['url']}'>{news2['title']}</a>\n"
        f"{news2['data']}"
        )
    await msg.answer(text=news1_message + news2_message,
                     parse_mode=ParseMode.HTML)


# –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—á–µ—Ç–∞ –º–∞—Å—Å—ã —á–µ—Ä–µ–∑ –≤–≤–æ–¥ –æ–±—ä–µ–º–∞, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ –¥–∞–≤–ª–µ–Ω–∏—è.
# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å—á–µ—Ç–∞
@dp.callback_query_handler(lambda c: c.data == 'calc button 1')
async def process_calculation_1(callback_query: types.CallbackQuery,
                                state: FSMContext):
    try:
        await bot.answer_callback_query(callback_query.id)
        # –∑–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –æ–±—ä–µ–º–∞
        await bot.send_message(callback_query.from_user.id,
                               text="–í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º, –ª:")
        # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ü–µ–ø–æ—á–∫–∏ –ø–æ—Å–ª–µ–¥. –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
        await state.set_state("volume")
    except ValueError as e:
        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –≤–≤–æ–¥–∞
        logging.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
        await bot.send_message(chat_id=callback_query.from_user.id,
                               text=CORRECT_MSG)


# —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–º–∞ –∏ –≤–≤–æ–¥ –¥–∞–≤–ª–µ–Ω–∏—è
@dp.message_handler(state="volume")
async def process_volume(message: types.Message, state: FSMContext):
    try:
        volume = float(message.text)
        await state.update_data(volume=volume)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–≤–ª–µ–Ω–∏–µ, –±–∞—Ä:")
        await state.set_state("pressure")
    except ValueError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
        await bot.send_message(chat_id=message.from_user.id,
                               text=CORRECT_MSG)


# —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–∞–≤–ª–µ–Ω–∏—è –∏ –≤–≤–æ–¥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
@dp.message_handler(state="pressure")
async def process_pressure(message: types.Message, state: FSMContext):
    try:
        pressure = float(message.text)
        await state.update_data(pressure=pressure)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É, –≥—Ä–∞–¥—É—Å—ã –¶–µ–ª—å—Å–∏—è:")
        await state.set_state("temperature")
    except ValueError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
        await bot.send_message(chat_id=message.from_user.id,
                               text=CORRECT_MSG)


# —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—Å—á–µ—Ç–∞ –º–∞—Å—Å—ã
@dp.message_handler(state="temperature")
async def process_temperature(message: types.Message, state: FSMContext):
    try:
        temperature = float(message.text)
        data = await state.get_data()
        volume = data.get("volume")
        pressure = data.get("pressure")

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é calculator_1 –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
        result = func.calculator_1(volume, temperature, pressure)
        await message.answer(f"–ú–∞—Å—Å–∞ –≤–æ–¥–æ—Ä–æ–¥–∞: {result} –∫–≥")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
    except ValueError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
        await bot.send_message(chat_id=message.from_user.id,
                               text=CORRECT_MSG)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—á–µ—Ç–∞ –æ–±—ä–µ–º–∞ —á–µ—Ä–µ–∑ –º–∞—Å—Å—É.
# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å—á–µ—Ç–∞
@dp.callback_query_handler(lambda c: c.data == 'calc button 2')
async def process_calculation_2(callback_query: types.CallbackQuery,
                                state: FSMContext):
    try:
        await bot.answer_callback_query(callback_query.id)
        # –∑–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –º–∞—Å—Å—ã
        await bot.send_message(callback_query.from_user.id,
                               text="–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Å—É, –∫–≥:")
        await state.set_state("mass")
    except ValueError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
        await bot.send_message(chat_id=callback_query.from_user.id,
                               text=CORRECT_MSG)


# —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –º–∞—Å—Å—ã –∏ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ –¥–∞–≤–ª–µ–Ω–∏—è
@dp.message_handler(state="mass")
async def process_mass(message: types.Message, state: FSMContext):
    try:
        mass = float(message.text)
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é calculator_2 –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
        result = func.calculator_2(mass)
        await message.answer(f"–û–±—ä–µ–º –≤–æ–¥–æ—Ä–æ–¥–∞: {result} –∫—É–±. –º")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
    except ValueError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
        await bot.send_message(chat_id=message.from_user.id,
                               text=CORRECT_MSG)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—á–µ—Ç–∞ –º–∞—Å—Å—ã —á–µ—Ä–µ–∑ –æ–±—ä–µ–º.
# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å—á–µ—Ç–∞
@dp.callback_query_handler(lambda c: c.data == 'calc button 3')
async def process_calculation_3(callback_query: types.CallbackQuery,
                                state: FSMContext):
    try:
        await bot.answer_callback_query(callback_query.id)
        # –∑–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –æ–±—ä–µ–º–∞
        await bot.send_message(callback_query.from_user.id,
                               text="–í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º, –∫—É–±. –º:")
        await state.set_state("volume1")
    except ValueError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
        await bot.send_message(chat_id=callback_query.from_user.id,
                               text=CORRECT_MSG)


# —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ –∏ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Å—Å—ã
@dp.message_handler(state="volume1")
async def process_vol1(message: types.Message, state: FSMContext):
    try:
        vol1 = float(message.text)
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é calculator_2 –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
        result = func.calculator_2(vol1)
        await message.answer(f"–ú–∞—Å—Å–∞ –≤–æ–¥–æ—Ä–æ–¥–∞: {result} –∫–≥")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
    except ValueError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
        await bot.send_message(chat_id=message.from_user.id,
                               text=CORRECT_MSG)

# –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ô –ú–û–î–£–õ–¨
# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ, –≥–¥–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≥—Ä–∞—Ñ–∏–∫–∏


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–∞
# "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º"
@dp.callback_query_handler(lambda c: c.data == 'stat_button_1')
async def send_plot1(callback_query: types.CallbackQuery):
    # –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
    file_path = statistic_module.countries_plot(SAVE_PLOT_PATH)
    await bot.answer_callback_query(callback_query.id)
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
    await bot.send_photo(callback_query.from_user.id,
                         photo=open(file_path, 'rb'),
                         reply_markup=stat_back_kb(),
                         caption=PLOT_1_CAPTION)
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
    os.remove(file_path)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–∞ "–í–≤–æ–¥ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –≥–æ–¥–∞–º"
@dp.callback_query_handler(lambda s: s.data == 'stat_button_2')
async def send_plot2(callback_query1: types.CallbackQuery):
    # –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
    file_path = statistic_module.years_plot(SAVE_PLOT_PATH)
    await bot.answer_callback_query(callback_query1.id)
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
    await bot.send_photo(callback_query1.from_user.id,
                         photo=open(file_path, 'rb'),
                         reply_markup=stat_back_kb(),
                         caption=PLOT_2_CAPTION)
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
    os.remove(file_path)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –∫ –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –±–ª–æ–∫–∞
@dp.callback_query_handler(lambda b: b.data == 'stat_back')
async def back_to_stat(callback_query1: types.CallbackQuery):
    await bot.answer_callback_query(callback_query1.id)
    await bot.send_message(callback_query1.from_user.id,
                           text=STAT_MSG,
                           reply_markup=statistic_kb())

# –ó–ê–ü–£–°–ö –ë–û–¢–ê
if __name__ == '__main__':
    storage = MemoryStorage()
    dp.storage = storage
    executor.start_polling(dp, skip_updates=True,
                           on_startup=print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω'))
